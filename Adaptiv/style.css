/*обратимся ко всем элементам, чтобы убрать отступы, которые назначит браузер по умолчанию*/
*{
    padding: 0;
    margin: 0;
}
/* для основного контейнера будем использовать фиксированно-резиновую верстку*/
.container{
    /*устанавливаем основную ширину равной ширине видимо части окна браузера*/
    width: 100vw;
    /*устанавливаем минимальную ширину до которой можно сживать контейнер, если ширина*/
    min-width: 320px;
    /* устанавливаем максимальную ширину, до которой можно расширять контейнер, если ширина устройства будет больше - по бокам появятся отступы*/
    max-width: 1200px;
    /*для того чтобы контейнер всегда находился по центру по горизонтали, указываем значения для внешних отступов*/
    margin: auto;
    /* в случае если контента будет мало, чтобы страница полсностью заполнила  всю высоту окна браузера, ставим мин. высоту*/
    min-height: 100vh;
    height: auto;
    display: flex;
    /*направление основной оси меняем на вертикальное*/
    flex-direction: column;
}
header{
    background-color: pink;
    flex-basis: 10vh;
}
main{
    flex: 1 1 auto;
    display: flex;
}
main>aside{
    background-color: cyan;
    flex-basis: 20%;
}
main>section{
    background-color: coral;
    flex: 1 1 auto;
}
/*обращаемся к main в нем ищет section и обращается к aside  который идет после него (если таковой есть), а + означает что они сестринские элементы и должны лежать на одном уровне*/
main>section+aside{
    background-color: lime;
    flex-basis: 20%;
}
footer{
    background-color: gray;
    flex-basis: 5vh;
}
/* запрос для экранов с максимальной шириной 960px и меньше*/
@media screen and (max-width:960px){
    main>section+aside{
        display: none;
    }
    main>aside{
        flex-basis: 30%;
    }
    main>section{
        flex-basis: 70%;
    }
}
@media screen and (max-width:570.99px) {
    main{
        flex-direction: column;
    }
    main>aside{
        flex-basis: 20vh;
    }
    main>section{
        flex-basis: auto;
        order: -1;
    }
}